# -*- coding: utf-8 -*-
"""Clustering the countries

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ugFlY0e1R7ltvHhYkPzx5z-oUI4MHoFo
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

df = pd.read_csv('https://drive.google.com/uc?export=download&id=1WrbvqsWUUlqFStXHyFmrzBmr-1E99lf9')
df.head()

df.info()

df.describe()

sns.pairplot(df)

df1 = df.copy()
df1.drop(columns=['Negara'], inplace=True)

df1.head()

#melihat korelasi antar fitur
plt.figure(figsize=(12,12))
sns.heatmap(df1.corr(), annot=True)

#melihat distribusi normal dataset
plt.figure(figsize=(20,25))
num = 1
for i in df1:
  if num < 10:
    ax = plt.subplot(4, 4, num)
    sns.distplot(df1[i])
    plt.xlabel(i, fontsize=12)
  num += 1
plt.show()

plt.figure(figsize=(18, 6))
kematian_anak = df[['Negara', 'Kematian_anak']].sort_values('Kematian_anak', ascending=True).head(20)
ax = sns.barplot(x='Negara', y='Kematian_anak', data=kematian_anak)
ax.set(xlabel='Negara', ylabel='Kematian Anak')
ax.set_title('Kematian anak pada setiap negara')
plt.xticks(rotation=90)
plt.show()

from sklearn.neighbors import NearestNeighbors
from random import sample
from numpy.random import uniform
from math import isnan

def hopkins(X):
    d = X.shape[1]
    #d = len(vars) # columns
    n = len(X) # rows
    m = int(0.1 * n) # heuristic from article [1]
    nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)
 
    rand_X = sample(range(0, n, 1), m)
 
    ujd = []
    wjd = []
    for j in range(0, m):
        u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)
        ujd.append(u_dist[0][1])
        w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)
        wjd.append(w_dist[0][1])
 
    H = sum(ujd) / (sum(ujd) + sum(wjd))
    if isnan(H):
        print(ujd, wjd)
        H = 0
 
    return H

#Hopkins Score
hopkins_score = round(hopkins(df1), 2)
hopkins_score

df_cluster = df1

wcs = []
for i in range(1,11):
  kmeans1 = KMeans(n_clusters=i, init='k-means++', random_state=42).fit(df_cluster)
  wcs.append(kmeans1.inertia_)

plt.figure(figsize=(10,6))
plt.plot(range(1,11), wcs)
plt.title('The Elbow Method')
plt.xlabel('Number of cluster')
plt.ylabel('WCS')
plt.show()

#silhoutte coefficient
from sklearn.metrics import silhouette_score
silhoutte = []

K = []
for i in range(2,9):
  KMean = KMeans(n_clusters=i, init='k-means++', random_state=42).fit_predict(df_cluster)
  silhoutte.append(silhouette_score(df_cluster, KMean))
  K.append(i)

#plotting a bar graph to compare the result
plots = sns.barplot(K, silhoutte)
plt.xlabel('Cluster')
plt.ylabel('Silhouette Score')
plt.show()

silhoutte

sc = StandardScaler()
df_outlier = sc.fit_transform(df_cluster)
km = KMeans(n_clusters=2, init='k-means++', random_state=42).fit(df_outlier)
labels = km.labels_
df_cluster['Cluster'] = labels

df_cluster

plt.figure(figsize=(12,8))
print('n_cluster = 2')
sns.scatterplot(data= df_cluster, x='GDPperkapita',y= 'Kematian_anak', hue='Cluster', palette='tab10')
#plt.scatter(df_cluster['GDPperkapita'][df_cluster.Cluster==0], df_cluster['Kematian_anak'][df_cluster.Cluster==0], c='blue', s=100, edgecolors='green' )
#plt.scatter(df_cluster['GDPperkapita'][df_cluster.Cluster==1], df_cluster['Kematian_anak'][df_cluster.Cluster==1], c='green', s=100, edgecolors='green' )

center = km.cluster_centers_
plt.scatter(center[:,0], center[:,1], c='black', s=500)
plt.xlabel('GDPperkapita')
plt.ylabel('Kematian_anak')
plt.show()

df_cluster

cluster2 = df_cluster.groupby(['Cluster']).agg({'Kematian_anak':'mean', 
                                                'Ekspor':'mean', 
                                                'Kesehatan':'mean', 
                                                'Impor':'mean', 
                                                'Pendapatan':'mean',
                                                'Inflasi':'mean',
                                                'Harapan_hidup':'mean',
                                                'Jumlah_fertiliti':'mean',
                                                'GDPperkapita':'mean'})
cluster2

cluster_negara = pd.concat([df['Negara'],df_cluster], axis=1, join='outer')
cluster_negara.sample(5)

print(cluster_negara[cluster_negara.Cluster == 0].Negara.values)
print()
print('Total : ', cluster_negara[cluster_negara.Cluster == 0].Negara.count())

print(cluster_negara[cluster_negara.Cluster == 1].Negara.values)
print()
print('Total :', cluster_negara[cluster_negara.Cluster == 1].Negara.count())